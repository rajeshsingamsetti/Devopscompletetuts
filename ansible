
ansible is an configure management tool.

linux:
chef
puppet 
ansible

windows:
sccm
powershell
dsc


ansible vs puppet.
aansible is buyed from redhat
its an agent less work through the ssh opensource free not complex
it pushes the configuration.


puppet:
its an agent based works on agent
agent push the configuration.

ansible install:

deploy 2 machines(ubuntu)
ansible client
ansible child/node

ansible needs python

login into client server.

sudo su -
apt update
install python3
docs.ansible.com
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo apt-add-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible


after ansible install on

ssh-keygen (enter 3 times)

login in into the node

sudo su -
ssh-keygen (enter 3 times)
rm -rf .ssh/id_rsa*

vi authorized_keys

paste the public key of client of anible ssh keygen

now go to client of ansible and type
sudo su -
ssh -i .ssh/id_rsa root@ip-privateipofnode

it will login into node

after go to ansible node server and take the image of that server

my ami choose ur ami again launch 2 instances

now in client

under root
vi ansible_hosts
[all_Servers]
private ipaddressclient
private ipadddrnode1
private ipadddrnode2
private ipadddrnode3


save it

inverntory file  u put whereever u want
vi /etc/enable/ansible.cfg (search for host_key_checking = False) uncomment this one + save it(without this one it will ask yes before login server everytime)

ansible -i ansible_hosts -m ping all

now ur controller will come red
to overcome that go to vi .ssh/authorized-keys (paste ur public key here)
now again try 
ansible -i ansible_hosts -m ping all

now all will come green


*** above process is password less authentication.


ansible ad-hoc commands
ansible playbooks

[all_Servers]
ip-10-1-1-111.ec2.internal
ip-10-1-1-158.ec2.internal
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal

[docker_master]
ip-10-1-1-158.ec2.internal

[docker_nodes]
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal


ad-hoc commands (nothing but simple commands to run)
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" or
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" | grep -i "ubuntu"

//installing docker from ansible adhoc commands
ansible -i ansible_hosts ip-10.2.34.4.ec2.internal -m shell \ 
-a 'curl https://get.docker.com | bash"

ansible -i ansible_hosts docker_master -m shell -a 'docker swarm init'

TOKEN=$(ansible -i ansible_hosts docker_master -m shell -a 'docker swarm join-token worker -q' | tail -1)

#ansible -i ansible_hosts docker_nodes -m shell -a 'curl https://get.docker.com | bash'

MASTER_PVIP=$(ansible -i ansible_hosts ip-10-1-1-158.ec2.internal -m shell -a 'curl -sL http://169.254.169.254/latest/meta-data/local-ipv4' | tail -1)

ansible -i ansible_hosts docker_nodes -m shell -a "docker swarm join --token $TOKEN $MASTER_PVIP:2377"


-------------------------------Ansible-AdHoc-Commands-----------
ansible -i hosts all -m ping
ansible -i hosts all -m ping -f 1
ansible -i hosts all -m command -a hostname
ansible -i hosts all -m command -a uptime
ansible -i hosts all -m command -a free
ansible -i hosts all -m command -a df -h
ansible app -s -a "yum install -y docker-engine"
ansible -i hosts all  -a "cat /etc/passwd"
ansible -i hosts servers:app  -a free --limit machine2
 ansible -i hosts all -a uptime --limit servers
ansible -i hosts prod -a free (clildren as app & servers)
ansible -i hosts 'servers:!app' -a free
ansible -i hosts 'sertp' -a free
ansible -i hosts servers[0] -a uptime
ansible -i hosts servers[0:2] -a uptime
ansible -i hosts servers[2:] -a uptime
ansible -i hosts  servers -m user -a "user=testuser password=$1$pGP3ICXv$6PEDQI/N1RgLzVr/l00YY0"
ansible app -s -m group -a "name=admin state=present"
ansible app -s -m user -a "name=devops group=admin createhome=yes"
ansible app -m copy -a "src=/vagrant/test.txt dest=/tmp/test.txt"

-------------------------------------------------------------


it will give all servers passwd

1. Download the Docker image from hub.docker.com
docker pull sreeharshav/ubuntu16:withssh2.0_V2
docker pull sreeharshav/ubuntu16:ansible2.75_V2
2. Create a new network as below:
docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
3.Create three machines as below using the above network.
curl https://get.docker.com | bash

docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
docker run --rm -dit --name controller --hostname controller --network ansible_nw sreeharshav/ubuntu16:ansible2.75_V2
docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web2 --hostname web2 -p 8001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web3 --hostname web3 -p 8002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app1 --hostname app1 -p 9000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app2 --hostname app2 -p 9001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app3 --hostname app3 -p 9002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db1 --hostname db1 -p 9003:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db2 --hostname db2 -p 9004:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db3 --hostname db3 -p 9005:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db4 --hostname db4 -p 9006:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2


regular expressions:
ansible -i hosts 'web:app:!db' -m ping























