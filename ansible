
ansible is an configure management tool.

linux:
chef
puppet 
ansible

windows:
sccm
powershell
dsc


ansible vs puppet.
aansible is buyed from redhat
its an agent less work through the ssh opensource free not complex
it pushes the configuration.


puppet:
its an agent based works on agent
agent push the configuration.

ansible install:

deploy 2 machines(ubuntu)
ansible client
ansible child/node

ansible needs python

login into client server.

sudo su -
apt update
install python3
docs.ansible.com
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo apt-add-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible


after ansible install on

ssh-keygen (enter 3 times)

login in into the node

sudo su -
ssh-keygen (enter 3 times)
rm -rf .ssh/id_rsa*

vi authorized_keys

paste the public key of client of anible ssh keygen

now go to client of ansible and type
sudo su -
ssh -i .ssh/id_rsa root@ip-privateipofnode

it will login into node

after go to ansible node server and take the image of that server

my ami choose ur ami again launch 2 instances

now in client

under root
vi ansible_hosts
[all_Servers]
private ipaddressclient
private ipadddrnode1
private ipadddrnode2
private ipadddrnode3


save it

inverntory file  u put whereever u want
vi /etc/enable/ansible.cfg (search for host_key_checking = False) uncomment this one + save it(without this one it will ask yes before login server everytime)

ansible -i ansible_hosts -m ping all

now ur controller will come red
to overcome that go to vi .ssh/authorized-keys (paste ur public key here)
now again try 
ansible -i ansible_hosts -m ping all

now all will come green


*** above process is password less authentication.


ansible ad-hoc commands
ansible playbooks

[all_Servers]
ip-10-1-1-111.ec2.internal
ip-10-1-1-158.ec2.internal
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal

[docker_master]
ip-10-1-1-158.ec2.internal

[docker_nodes]
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal


ad-hoc commands (nothing but simple commands to run)
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" or
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" | grep -i "ubuntu"

//installing docker from ansible adhoc commands
ansible -i ansible_hosts ip-10.2.34.4.ec2.internal -m shell \ 
-a 'curl https://get.docker.com | bash"

ansible -i ansible_hosts docker_master -m shell -a 'docker swarm init'

TOKEN=$(ansible -i ansible_hosts docker_master -m shell -a 'docker swarm join-token worker -q' | tail -1)

#ansible -i ansible_hosts docker_nodes -m shell -a 'curl https://get.docker.com | bash'

MASTER_PVIP=$(ansible -i ansible_hosts ip-10-1-1-158.ec2.internal -m shell -a 'curl -sL http://169.254.169.254/latest/meta-data/local-ipv4' | tail -1)

ansible -i ansible_hosts docker_nodes -m shell -a "docker swarm join --token $TOKEN $MASTER_PVIP:2377"


-------------------------------Ansible-AdHoc-Commands-----------
ansible -i hosts all -m ping
ansible -i hosts all -m ping -f 1
ansible -i hosts all -m command -a hostname
ansible -i hosts all -m command -a uptime
ansible -i hosts all -m command -a free
ansible -i hosts all -m command -a df -h
ansible app -s -a "yum install -y docker-engine"
ansible -i hosts all  -a "cat /etc/passwd"
ansible -i hosts servers:app  -a free --limit machine2
 ansible -i hosts all -a uptime --limit servers
ansible -i hosts prod -a free (clildren as app & servers)
ansible -i hosts 'servers:!app' -a free
ansible -i hosts 'sertp' -a free
ansible -i hosts servers[0] -a uptime
ansible -i hosts servers[0:2] -a uptime
ansible -i hosts servers[2:] -a uptime
ansible -i hosts  servers -m user -a "user=testuser password=$1$pGP3ICXv$6PEDQI/N1RgLzVr/l00YY0"
ansible app -s -m group -a "name=admin state=present"
ansible app -s -m user -a "name=devops group=admin createhome=yes"
ansible app -m copy -a "src=/vagrant/test.txt dest=/tmp/test.txt"

-------------------------------------------------------------


it will give all servers passwd

1. Download the Docker image from hub.docker.com
docker pull sreeharshav/ubuntu16:withssh2.0_V2
docker pull sreeharshav/ubuntu16:ansible2.75_V2
2. Create a new network as below:
docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
3.Create three machines as below using the above network.
curl https://get.docker.com | bash

docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
docker run --rm -dit --name controller --hostname controller --network ansible_nw sreeharshav/ubuntu16:ansible2.75_V2
docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web2 --hostname web2 -p 8001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web3 --hostname web3 -p 8002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app1 --hostname app1 -p 9000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app2 --hostname app2 -p 9001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app3 --hostname app3 -p 9002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db1 --hostname db1 -p 9003:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db2 --hostname db2 -p 9004:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db3 --hostname db3 -p 9005:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db4 --hostname db4 -p 9006:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2


regular expressions:
ansible -i hosts 'web:app:!db' -m ping

ansible play book
launch ubuntu instances insted of multiple servers we will use docker multiple containers
    1  sudo apt update -y
    2  sudo apt install software-properties-common
    3  sudo apt-add-repository --yes --update ppa:ansible/ansible
    4  sudo apt install ansible
    5  ansible -version
    6  ansible --version
    7  clear
    8  curl -sL https://get.docker.com | bash
    9  docker
   10  curl https://get.docker.com | bash
   11  docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
   12  docker run --rm -dit --name controller --hostname controller --network ansible_nw sreeharshav/ubuntu16:ansible2.75_V2
   13  docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
   14  docker run --rm -dit --name web2 --hostname web2 -p 8001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2

docker ps

docker exec -it controller bash

open two terminals one is for controller one is for ansible

cat hosts
ansible -i hosts 'web:app:!db' -m ping
ansible -i hosts web1 -m setup (it will give the total info about that container)

install nginx
ansible -i hosts web -m shell -a "apt update && apt install nginx -y && service nginx start"

docker stop web1 web2 
docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2

so particular step by step by undestanding purpose we are using playbooks

---
  - name: playbook for installing nginx
    hosts: web
    gather_facts: no
    tasks:
      - name: perform apt update
        shell: apt update 

      - name: install nginx
        shell: apt install nginx -y

      - name: start nginx service
        shell: service nginx start

  - name:  installing unzip
    hosts: web
    gather_facts: no
    tasks:
      - name: perform apt update
        shell: apt update 

      - name: install unzip
        shell: apt install unzip -y

create a file vi myplay.yml
paste the above content

ansible-playbook -i hosts myplay.yml --syntax-check
ansible-playbook -i hosts myplay.yml -vvv
ansible-playbook -i hosts myplay.yml 


ctrl +c 
docker exec -it web1 unzip
check the info of unzip it will unzipping or not

---
  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: no
    tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            owner=root
            group=root
            mode=0644
       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            owner=root
            group=root
            mode=0644
       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            owner=root
            group=root
            mode=0644
       - name: restart nginx
         command: service nginx restart


docker exec -it controller bash
ls /tmp/
cd /tmp
git clone https://github.com/mavrick202/dockertest1.git


now go to browser type public ip with port no of 8000
publicip:8000/

--------------------------------NGINX Install Using Client Local Nginx Folder--------------------------

  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: no
    tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       
       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: restart nginx
         command: service nginx restart
       
       - name: Delete Git Repo
         shell: rm -rf /tmp/dockertest1
         


---- handlers (if any changes made then only we need to restart the server means we need to use handlers)

---
  - name: Play for Install Nginx on WebServers
    hosts: web
    ignore_errors: true
    gather_facts: no
    tags:
      nginx
    tasks:
       - name: Run Apt Update
         shell: apt update
         tags:
           - update

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git
         tags:
           - git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
         tags:
             install

       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - index
         notify:
            - restart nginx

       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - style
         notify:
            - restart nginx

       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - index
         notify:
            - restart nginx

       - name: Delete Git Repo from tmp
         shell: rm -rf /tmp/dockertest1
         tags:
           - delete
    handlers:
       - name: restart nginx
         command: service nginx restart
         
         
  -------------------------------------------------PLAYBOOK-WITH-TAGS-HANDLER-VARIABLES_REGISTER---------
- name: Play for Install Nginx on WebServers
  hosts: web
  gather_facts: no
  tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Check OS Version
         shell: cat /etc/lsb-release
         register: os_version
         tags:
           - os

       - debug:
           var: os_version['stdout_lines'][1]
         tags:
           - os

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present

       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
         notify:
          - restart nginx
         tags:
           - index
       - name: Copy the style files to  destination folder.
         notify:
          - restart nginx
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - style

       - name: Copy the javascript files to  destination folder.
         notify:
          - restart nginx
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - js

       - name: Delete Git Repo
         shell: rm -rf /tmp/dockertest1

  handlers:
    - name: restart nginx
      command: service nginx restart       



debug is used for the to show message outside.


*** tags running 
ansible-playbook -i hosts myplay.yml --check --tags os,index

                                                                        conditions && loops:
ref url:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html
https://docs.ansible.com/ansible/2.4/playbooks_loops.html
---
- name: Create set of users
  hosts: all
  gather_facts: yes
  vars:
    os1family: "Debian"
    os2family: "RedHat"
    password: "$1$oEe4m6pU$AAiaKEiYrrcOHW3v3oj7d."
  tasks:
    - name: Create Testusers 1,2,3,4,5
      user: >
        name={{ item }}
        shell=/bin/bash
        password={{ password }}
      with_items:
        - debuser1
        - debuser2
        - debuser3
        - debuser4
        - debuser5
      when: ansible_os_family == "{{ os1family }}"
    - debug:
        msg: The OS Family is {{ ansible_os_family }}
      tags:
        - ubuntu
        - test
    - name: Create Testusers 6,7,8,9,10
      user: >
        name={{ item }}
        shell=/bin/bash
        password={{ password }}
      with_items:
        - rheluser1
        - rheluser2
        - rheluser3
        - rheluser4
        - rheluser5
      when: ansible_os_family == "{{ os2family }}"
    - debug:
        msg: The OS Family is {{ ansible_os_family }}
      tags:
        - rhel
        - prod
        
        
******* to get all the information about that particular server.

ansible -i hosts web1 -m setup

vi /etc/ansible/ansible.cfg
To configure fact caching using redis, enable it in ansible.cfg as follows:
[defaults]
gathering = smart
fact_caching = redis or jsonfile
fact_caching_timeout = 86400 # seconds

after that above code u paste it.
ansible -i hosts web1 -m setup

Example:
[defaults]
gathering = smart
fact_caching = jsonfile
fact_caching_connection = /tmp/factsjson
fact_caching_timeout = 86400


root@controller:/# ll /tmp/factsjson/
total 92
drwxr-xr-x 2 root root  4096 Mar 23 02:13 ./
drwxrwxrwt 1 root root  4096 Mar 23 02:14 ../
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web1
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web2
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web3

now all cathing will be there on under /tmp/factsjson/

cat /tmp/factsjson/web1 | grep -i ansible_os


conditions:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html


madhu webserver info *** container ip's


https://github.com/mavrick202/ansibletemplatetesting


---
  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: yes
    vars:
      custom_heading: "Welcome To DevOps Training B13 By Sreeharsha Veerapalli"
      todays_date: "{{ ansible_facts['date_time']['date'] }}"
      host_name: "{{ ansible_facts['hostname'] }}"
      fqdn_name: "{{ ansible_facts['fqdn'] }}"
      ip_address: "{{ ansible_facts['eth0']['ipv4']['address'] }}"
    tasks:
       - name: Run Apt Update
         shell: apt update && apt install -y python-apt

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       - name: Copy the files to index destination folder.
         template: >
            src=/tmp/ansibletemplatetesting/index.j2
            dest=/var/www/html/index.nginx-debian.html
            owner=root
            group=root
            mode=0644
       - name: Copy the style files to destination folder.
         copy: >
            src=/tmp/ansibletemplatetesting/style.css
            dest=/var/www/html/style.css
            owner=root
            group=root
            mode=0644
       - name: Copy the javascript files to destination folder.
         copy: >
            src=/tmp/ansibletemplatetesting/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            owner=root
            group=root
            mode=0644
       - name: restart nginx
         command: service nginx restart





docker run --rm -dit -p 8000:80 sreeharshav/rollingupdate:v5

note : u should had to run this command below the controller.

ansible roles:

preconfigured roles:
we can create own roles are ansible galaxy we can download it.

ansible roles:
https://www.learnitguide.net/2018/02/ansible-roles-explained-with-examples.html


to see the roles

ls /etc/ansible/roles

ansible-galaxy init /etc/ansible/roles/mynginx






                                                                 ******* from first guru
######## Ansible ########

Configuration Management(CM):
-----------------------------
A configuration management is refers to the process of systematically handling the changes to a system.
A configuration management (CM) system is used to keep track of an organizationís hardware, software and related information. 
This includes software versions and updates installed on the organization's computer systems.

with respect to IT, it covers set of thigs like below
	@hardwaree
	@software
	@Network
	@People
	@Process

Herculean task for Administratiors:
----------------------------------
As a sysadmin we do:(Pain Points)
	Create/delete users                 
	Taking Backups
	Deploying Applications
	Configure services
	Documenting steps
	keep maintaining systems
	keep repeating ourselves, so boring
	Rely on our memory (what conf we had did on what server)

	The undelying problem is STATE of the server (here state can be a backup,user creation or application any thing)
		STATE is a snapshot of your configuration
			Eg:- file '/root/hello.txt' do
                                action: create
			        content :'welcome to chef' --->> this is STATE of file b/n do and end.
			     end
 
Configuration management Tools helps us to implement:
-----------------------------------------------------
 * Procedures
 * Policies
 * Technicics
 * Tools

By adopting configuration management, you will benefit from:
------------------------------------------------------------

* Reduced risk:-  of outages and security breaches through visibility and tracking of the changes to your systems.

* Cost reduction:-  by having detailed knowledge of all the elements of your configuration, avoiding wasteful duplication of your technology assets.

* Strict control:-  of your processes by defining and enforcing formal policies and procedures that govern asset identification, status monitoring, and auditing.

* Greater agility and faster problem resolution:-  enabling you to provide a higher quality of service.

* Quicker restoration of service:-  In an outage, you'll be able to recover quickly as your configuration is documented and automated.

* Increase uptime

* Prevent Errors

* Code re-usability

Alternatives:
-------------
Puppet/Chef/Saltstack...etc


Ansible:-
---------
Ansible is an automation platform that configures and manages your infrastructure, whether it is on-premises or in the cloud.
      >> configuration mangement tool for IT professions.
      >> Ansible is a independent
      >> you only need to tell to ansible what the desired configuration should be, not how to achieve it.
      >> Tell what to do not how to do. (Ansible Code)
                 eg: 1. check whether the package is installe or not
                     2. install git 1.2
                     3. we need to compare whether git 1.2 is compatable to our system
                     4. if not, then install git 1.3 version
                     5. return values
      >> If you use ansible code 
		eg: install git1.2 (that too reusable)
      >> it turns your infrastructure as a code.
                means not converting your infrastructure as a code, it just defining your infrastructure as a code.

      >> Why ansible is a infrastructure as a code because
	       @ if your infrastructure is versionable
	       @ if your infrastructure is repeatable
	       @ if your infrastructure is testable
               if you agree with above 3steps, then ansible is going to act as "infrastructure as a code".

Why Ansible:
-----------
* "Redhat" people developed "Ansible" and now recently "IBM" is over taken by "Redhat" (so, it is very compatable to run redhat tools in redhat machines) 
* No need to go with huge configurations and setup compare to chef and puppet.
* pull mechanism(agents has to pull the things from server)
* lot of learning is required for chef and puppet

+ve(pros) Ansible:
------------------
* Agentless
* Relies on ssh
* it uses Python internally(no need to write python programming/script) 
* Push Mechanism
     @ we have to install ansible in one machine and push the configuration and all to other machines through ssh connections.

Archetecture:
-------------
  Ansible Server
     YAML--------------------------------------------------------------------->>Node(collect all the info about the system)
  (workspace where we going to write code, 			ssh
       which describes the state of server)                     
  YAML Ain't Markup Language    

Configurations:
---------------
	ANSIBLE.CONFIG (environment variable)
	ansible.cfg(current directory)
	.ansible.cfg(home directory of user)
	/etc/ansible/ansible.cfg(default)

1. cd /etc/ansible/ansible.cfg
2. cd /etc/ansible/hosts

Installation:
-------------
RHEL Above 7.1
yum install epel-release
yum update
yum install git python python-devel python-pip openssl python


epel enable link : - yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
verify epel repo : - yum repolist (or) yum makecache 
ansible :- yum install -y https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.7.4-1.el7.ans.noarch.rpm 
ansible --version

step1:- go to ansibel default configuration file  "/etc/ansible/ansible.cfg" and uncomment the inventory.
	        >> what are the different machines to which ansible has to connect and do some configurations

step2:- enable sudo_user in the same confg file.(/etc/ansible/ansible.cfg)

--->> create users in both node and server and add sudo privaliges in visudo
       ansible ALL=(ALL) NOPASSWD: ALL

 password less login using SSH keys
 ----------------------------------
    >> ssh-keygen
    >> ssh-copy-id -i /root/.ssh/id_rsa.pub  192.168.222.130
    >> ssh-copy-id localhost(configuring on same machine)

Ansible Inventory:
-----------------
    inventory is a place where all the systems present to which ansible is to configure and run.
    default to be saved in the location /etc/ansible/hosts
    we can also specify a different inventory file using -i <path> in command line

Host Patterns:
-------------
   How to identify which machine i need to run specifically
   a pattern can refer to a particular machine or group name
     >> ansible <host pattern> -m <module name> -a<arguments>
     >> ansible all --list-hosts('all' refers all the machines in the inventory)
     >> groupname[0] --> picks the first machine in the group
     >> groupname[1] --> picks the second machine in the group
     >> groupname[-1] --> picks the first last machine in the group
     >> groupname[0:1] --> picks the first two machine in the group(range)
     >> groups sepertes with clolon uses to run hosts on multiple groups 
            > group_name1:group_name2

    		ansible all --list-hosts
    		ansible demo --list-hosts
   		ansible local --list-hosts
    		ansible 192.168.9.130 --list-hosts
Ad-Hoc Commands:
----------------
- if you want to run any simple and one time commands we will use ad-hoc commands
          syntax:- ansible[group/host] -m[module] -a[cmd]

       -a :- to run arbitrary(if you want to run any operating system commands through ansible use option '-a')
                    eg:- ansible demo -a "ls -l"
                         ansible demo -a "ls /root"
                         ansible demo -a "cat /var/log/messages" 
                 	 ansible local -a "touch hello_devops"
       -m :- to run a module(operating system tasks) 
                   eg:- ansible all -m ping 
                	ansible all -m copy -a "src=hello.txt dest=/root/hello.txt"

                   install/remove a packages:
                  	ansible demo -m yum -a "pkg=httpd state=present" (it will install)
	          	ansible all -m yum -a "pkg=httpd state=latest"  (it will update)
                  	ansible demo -m yum -a "pkg=httpd state=absent"  (it will remove)

                   start/stop a services:
                  	ansible -m service -a "name=httpd state=started"
	         	ansible -m service -a "name=httpd state=restarted"
                  	ansible -m service -a "name=httpd state=stopped"

                   create/delete a user account:(instead of creating user with command 'adduser/useradd')
		        ansible demo -m user -a "name=vinodh"
			ansible demo -m user -a "name=vinodh state=absent"
                   
                   Add/Remove a cron job:
                        ansible demo -m cron -a "name='name_of_cronjob' minute='20' hour='18' day='14' month='12' weekday='5' job='ls -alh > /dev/null'"
		        ansible demo -m cron -a "name='name_of_cronjob' minute='20' hour='18' job='cat /var/log/messages'"
                                Note:- if you not give cron columns then it will take default as "*"
                        ansible demo -u user -m cron -a "name='mycron' state='absent'"
                              (OR)
                        cron:
                           name: "my_cron"
                           minute: "2"
                           hour: "20"
                           day: "23"
                           month: "11"
                           weekday: "0"
                           job: "cat /var/mail/spool/vinodh"
                           job: "date > /dev/pts/2"
                           job: "mkdir /root/hello"
                                         
        -s :- To run as a sudo
                   eg:- ansible all -s -m ping 

     GREEN :- Ansibel executed successfully, but it will not do any changes in machine(node)
     YELLOW :- it did some changes in the machine
     RED :- if ansible is connecting to machine and failing in any step/task the it will show you "RED" colour 
        
Gathering Facts/Convergence/Idempotence:
----------------------------------------
     --	as soon as ansible connects to machine it gathers the information about the machine(node)
 	  and it start comparing the state that what we have defined and what it has gathered,
 	  in case it has diff then based on that it is going to udate/maintaining the state accordingly, if already in same state it is not going to do anything. 

       if we want to see what and all modules it is going to gather from machine, we can use
                    ansible all -m setup   
                    ansible demo -m setup -a "filter='ansible_nodename'"
                    ansible all -m setup -a "filter='ansible_dns'"
                    ansible all -m setup -a "filter='*ipv4*" 
                    ansible all -m setup -a "filter='*swap*" 
       If you want to save output to facts directory
                    ansible all -m setup --tree facts

Playbooks:  
----------
playbooks are ansible configurations, playbooks defines a policy you want your remote machine to enforce.
or set of steps in a general it process. playbooks are returened in YAML format
   -- usr/bin/ansible-playbook is used for running configurations from an playbook
   -- ansible-playbook <playbook_name.yml>

 # we have 3 section in playbooks       
    1.Target Section:- Defines the hosts against which playbooks tasks has to be executed
    2.Variable Section:- values that we were storing while running ansible and re-using whenever we want
    3.Tasks Section:- list of all modules that we need to run in order

 YAML
 ----
   * every YAML file starts with a list
   * each item in the list is a list of key/value pairs, commonly called a "hash" or a "directory"
   * all yaml files optionally begin with "---" and end with "..."
   * all members of a list are lines begining at the same indentation levelstarting with "-"
                   ---# a list of courses
                   courses:
                     - devops
                     - aws
                     - digital marketing 
                     - java 
                   ...
   * key: value     
                   ---# a employee details
                   Employee:
                     name: vinodh
                     job: Devops Engineer
                     company: xyz
                   ...

Eg(1):- 

      --- # sample playbook
      - hosts: all
        tasks:
          - name: install ftp package
            action: yum name=ftp state=present
Eg(2):-      
     --- # vinodh initial YAML playbook
     - hosts: all
       user: ani
       sudo: yes
       connection: ssh
       gather_facts: no
       tasks:
         - name: remove ftp package
           action: yum name=ftp state=absent 
Eg(3):-
      --- # variables declaration in playbook       
      - hosts: all
        user: ani
        sudo: yes
        connection: ssh
        gather_facts: no
        vars:
         pkg: httpd 
        tasks:
         - name: install "{{ pkg }}" package
           action: yum name='{{ pkg }}' state=present

Eg(4):-
     --- # 2nd method of variables declaration in playbook       
      - hosts: all
        user: ani
        sudo: yes
        connection: ssh
        gather_facts: no
        vars_files: ( we can declare variables in the form of variable files, in case if we want to use same file to diff playbooks)
          - filename.yml 
        tasks:
        - name: install "{{ variable_name }}" package
          action: yum name='{{ variable_name }}' state=present

Eg(5):- 
      --- # 3rd method of variables declaration in playbook       
      - hosts: all
        user: ani
        sudo: yes
        connection: ssh
        gather_facts: no
        vars_prompt: (we can delclare variables with prompting)
         - name: globes
           prompt: Pleae Enter The Package Name to Install. 
        tasks:
        - name: install "{{ globes }}" package
          action: yum name='{{ globes }}' state=present

 Note:- ansible-playbook name.yml --extra-vars "variable=value" (passing variable form command line)

Eg(6):- 
       ---  # multiple tasks in playbook 
       - hosts: all
         user: ani
         sudo: yes
         connection: ssh
         gather_facts: no
         vars_prompt:
           - name: variable_name
             prompt: Pleae Enter The Package Name to Install. 
         tasks:
           - name: install "{{ variable_name }}" package
             action: yum name='{{ variable_name }}' state=present 
           - name: httpd update
             action: yum pkg=httpd state=update 
           - name: finger delete
             action: yum pkg=finger state=absent   
Eg(7):-	
	--- # handlers in playbook
	- hosts: all
          user: ani
          sudo: yes
          connection: ssh
          gather_facts: no
          vars_prompt:
           - name: variable_name
           prompt: Pleae Enter The Package Name to Install. 
          tasks:
           - name: install "{{ variable_name }}" package
             action: yum name='{{ variable_name }}' state=present
             notify: restart vsftpd
          handlers:  
           - name: restart vsftpd
             action service name=vsftpd state=restarted
        
       Note:- having ability to call another task, only when the task run successfully(dependency)
               specifing when a task/tasks should be run.

Outline the playbook:
---------------------
--- # outlining to my playbook
- hosts: demo
  user: redhat02
  sudo: yes
  gather_facts: no
  connection: ssh
  tasks:
   - name: Display Date&Time For Begining of Playbook
     raw: /usr/bin/date  > /home/redhat02/begin_playbook_timestamp.log
   - name: Install ftp
     yum: pkg=ftp state=present
     notify: restart the ftp
   - name: install telnet
     yum: pkg=telnet state=present (OR) action: yum pkg=telnet state=present
   - name: moving logs
     raw: yum list installed > /home/redhat02/telnet_installed.log
   - name: Display Date&Time For Ending of Playbook
     raw: /usr/bin/date  > /home/redhat02/end_playbook_timestamp.log
  handlers:
   - name: restart the ftp
     action: service name=ftp state=started (OR) service: name=ftp state=started
        
   Note:- raw module is used to run the operating system commands   
   Note:- how to know the command path in linux
            * which <command_name>
            * which date
            * which useradd cat touch ls usermod chmod ..etc 
            * echo $PATH
   Note:- yum list
           yum list installed
           yum list installed vsftpd
           yum info ftp
           yum install/update/remove <package_name>         
     	
Dry Run:-
---------
without executing the steps, just checking what are the possibilities(format, syntax...etc) ansible will do
  eg:- ansible-playboolk filename.yml --check
Note:- we will use this in production

Asynchronous Actions and polling:
---------------------------------
 >> while using ansible against multiple machines, the operations may run longer then usual. so, we will not have a control/track on it.
 >> to have control whetere the task is running are not and running the tasks parallel, we use async mode.
 >> maximum runtime to timeout
 >> how frequently to poll for status
            eg:-  task-1 (sequence task executions)                 
                  task-2
                  task-3 
             
                  task-1 | task-2 | task-3(parallel task executions)

     async: 300 (if it running beyond 300 sec then it will automatically get terminated) 
     poll: 6
       >> to get the status of a parallelly running tasks we use poll option.  
       >> it will check and get some data on specified time given. 
run once:
---------
it will run the task only one time in every 1st machine of group, if you specify hosts: all also.
     eg:- run_once: true

delegate_to:
------------
specifing a individual host to run the task
    eg:- delegate_to: localhost
    
loop:
----
if you want to run single task multiple times, we use loops
--- # loop 
- hosts: all
  tasks:
    - name: adding list of users
      user: name={{ item }} state=present
      with_items:
        - user1
        - user2
        - user3

Conditional:
------------
--- # conditional playbook
- hosts: demo
  tasks: 
    - name: install apache2 for ubuntu
      command: apt-get -y install apache2
      when: ansible_os_family == "ubuntu"
    - name: install apache for redhat
      command: yum -y install httpd
      when: ansible_os_family == "RedHat"

Vault:
-----
ansible allows keeping sensitive data such as passwords/usernames or keys in encrypted files, rather then as plain text in your playbooks.
      * ansible-vault create playbook.yml
      * ansible-vault edit playbook.yml
      * ansible-vault rekey playbook.yml
      * ansible-vault decrypt playbook.yml
      * ansible-vault encrypt playbook.yml
 note:- we can run the file, but we can't see what we written in the playbook.
  
include statements:
------------------     
if you have comman tasks, which is going to be used in many playbooks, we can use 'include statements' rather then re-writing everything.
  eg:-  --- # include playbook
        - hosts: demo
          tasks:
            - include: vinu.yml
Tags:
----
 if you want to run a specific task which ever you like, then use tags.
     ansible-playbook vinu.yml --tags tag_name
     ansible-playbook vinu.yml --skip-tags tag_name 

--- # Tags playbook
- hosts: demo
  tasks:
   - name: enter your name
     raw: echo "vinodh" > /home/redhat02/vinodh.log
     tags:
      - firstname
   - name: designation
     raw: echo "devops_engineer" > /home/redhat02/vinodh.log
     tags: 
       - role

Roles:
------
>> we can organize playbooks into a directory structure called roles.
>> rather then putting all the content in the playbook, we can divide the content of the playbook into seperate files where we will have seperate directory structure.
>> for running diff functionalitys on one machine we need to right multiple playbooks, which is not recommanded and difficult to maintain also.
>> adding more and more functionalitys to playbooks will make it difficult to maintain in single file.
>> and roles concept is advanced one to include statement.
>> we can create n-number of roles under roles directory
>> Directory Structure
      superuser.yml(master playbook)
          roles/name-of-the-role
               tasks/main.yml
               vars/main.yml 
               handlers/main.yml 
               defaults/main.yml
               meta/main.yml
 Note: 
 	default path of roles:
        	/etc/asible/roles
    	we can alternately keep the master playbook in a diff location and specify the role path in ansible.cfg
 	in the /etc/ansible/ansible.cfg, uncomment roles_path and add the roles directory
       	       roles_path =/home/ansible/playbooks/roles
       
 condition in roles:
 -------------------
---
- hosts: demo
  roles:
    - redhat(role name)      
          (OR)
    - { role: redhat, when: ansible_os_family == "RedHat" }
    - { role: ubuntu, when: ansible_os_family == "Ubuntu" }
          
 wait_for:
----------
 >> it waits for condition before continuning
---
- hosts: demo
  tasks:
    - name: install httpd package
      yum: pkg=httpd state=latest
    - name: wait for service listening on port 80
      wait_for:
         port: 80
         state: started
              (OR)
         path: /home/redhat02/vinumaa.log 

Note:- systemctl start httpd (OR) service httpd start

Moving playbooks form one machine to another:
---------------------------------------------

here we again we will use version control system (scm/vcs)
    1. git init (your playbooks)
    2. git push remote repository (github)
    3. git clone repo url.....

 ---------- THE END  -------------

  





   
   






















