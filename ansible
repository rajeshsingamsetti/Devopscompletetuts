
ansible is an configure management tool.

linux:
chef
puppet 
ansible

windows:
sccm
powershell
dsc


ansible vs puppet.
aansible is buyed from redhat
its an agent less work through the ssh opensource free not complex
it pushes the configuration.


puppet:
its an agent based works on agent
agent push the configuration.

ansible install:

deploy 2 machines(ubuntu)
ansible client
ansible child/node

ansible needs python

login into client server.

sudo su -
apt update
install python3
docs.ansible.com
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo apt-add-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible


after ansible install on

ssh-keygen (enter 3 times)

login in into the node

sudo su -
ssh-keygen (enter 3 times)
rm -rf .ssh/id_rsa*

vi authorized_keys

paste the public key of client of anible ssh keygen

now go to client of ansible and type
sudo su -
ssh -i .ssh/id_rsa root@ip-privateipofnode

it will login into node

after go to ansible node server and take the image of that server

my ami choose ur ami again launch 2 instances

now in client

under root
vi ansible_hosts
[all_Servers]
private ipaddressclient
private ipadddrnode1
private ipadddrnode2
private ipadddrnode3


save it

inverntory file  u put whereever u want
vi /etc/enable/ansible.cfg (search for host_key_checking = False) uncomment this one + save it(without this one it will ask yes before login server everytime)

ansible -i ansible_hosts -m ping all

now ur controller will come red
to overcome that go to vi .ssh/authorized-keys (paste ur public key here)
now again try 
ansible -i ansible_hosts -m ping all

now all will come green


*** above process is password less authentication.


ansible ad-hoc commands
ansible playbooks

[all_Servers]
ip-10-1-1-111.ec2.internal
ip-10-1-1-158.ec2.internal
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal

[docker_master]
ip-10-1-1-158.ec2.internal

[docker_nodes]
ip-10-1-1-244.ec2.internal
ip-10-1-1-216.ec2.internal


ad-hoc commands (nothing but simple commands to run)
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" or
ansible -i ansible_hosts all -m shell -a "cat /etc/passwd" | grep -i "ubuntu"

//installing docker from ansible adhoc commands
ansible -i ansible_hosts ip-10.2.34.4.ec2.internal -m shell \ 
-a 'curl https://get.docker.com | bash"

ansible -i ansible_hosts docker_master -m shell -a 'docker swarm init'

TOKEN=$(ansible -i ansible_hosts docker_master -m shell -a 'docker swarm join-token worker -q' | tail -1)

#ansible -i ansible_hosts docker_nodes -m shell -a 'curl https://get.docker.com | bash'

MASTER_PVIP=$(ansible -i ansible_hosts ip-10-1-1-158.ec2.internal -m shell -a 'curl -sL http://169.254.169.254/latest/meta-data/local-ipv4' | tail -1)

ansible -i ansible_hosts docker_nodes -m shell -a "docker swarm join --token $TOKEN $MASTER_PVIP:2377"


-------------------------------Ansible-AdHoc-Commands-----------
ansible -i hosts all -m ping
ansible -i hosts all -m ping -f 1
ansible -i hosts all -m command -a hostname
ansible -i hosts all -m command -a uptime
ansible -i hosts all -m command -a free
ansible -i hosts all -m command -a df -h
ansible app -s -a "yum install -y docker-engine"
ansible -i hosts all  -a "cat /etc/passwd"
ansible -i hosts servers:app  -a free --limit machine2
 ansible -i hosts all -a uptime --limit servers
ansible -i hosts prod -a free (clildren as app & servers)
ansible -i hosts 'servers:!app' -a free
ansible -i hosts 'sertp' -a free
ansible -i hosts servers[0] -a uptime
ansible -i hosts servers[0:2] -a uptime
ansible -i hosts servers[2:] -a uptime
ansible -i hosts  servers -m user -a "user=testuser password=$1$pGP3ICXv$6PEDQI/N1RgLzVr/l00YY0"
ansible app -s -m group -a "name=admin state=present"
ansible app -s -m user -a "name=devops group=admin createhome=yes"
ansible app -m copy -a "src=/vagrant/test.txt dest=/tmp/test.txt"

-------------------------------------------------------------


it will give all servers passwd

1. Download the Docker image from hub.docker.com
docker pull sreeharshav/ubuntu16:withssh2.0_V2
docker pull sreeharshav/ubuntu16:ansible2.75_V2
2. Create a new network as below:
docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
3.Create three machines as below using the above network.
curl https://get.docker.com | bash

docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
docker run --rm -dit --name controller --hostname controller --network ansible_nw sreeharshav/ubuntu16:ansible2.75_V2
docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web2 --hostname web2 -p 8001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name web3 --hostname web3 -p 8002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app1 --hostname app1 -p 9000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app2 --hostname app2 -p 9001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name app3 --hostname app3 -p 9002:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db1 --hostname db1 -p 9003:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db2 --hostname db2 -p 9004:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db3 --hostname db3 -p 9005:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
docker run --rm -dit --name db4 --hostname db4 -p 9006:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2


regular expressions:
ansible -i hosts 'web:app:!db' -m ping

ansible play book
launch ubuntu instances insted of multiple servers we will use docker multiple containers
    1  sudo apt update -y
    2  sudo apt install software-properties-common
    3  sudo apt-add-repository --yes --update ppa:ansible/ansible
    4  sudo apt install ansible
    5  ansible -version
    6  ansible --version
    7  clear
    8  curl -sL https://get.docker.com | bash
    9  docker
   10  curl https://get.docker.com | bash
   11  docker network create --subnet 172.20.0.0/16 --gateway 172.20.0.254 ansible_nw
   12  docker run --rm -dit --name controller --hostname controller --network ansible_nw sreeharshav/ubuntu16:ansible2.75_V2
   13  docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2
   14  docker run --rm -dit --name web2 --hostname web2 -p 8001:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2

docker ps

docker exec -it controller bash

open two terminals one is for controller one is for ansible

cat hosts
ansible -i hosts 'web:app:!db' -m ping
ansible -i hosts web1 -m setup (it will give the total info about that container)

install nginx
ansible -i hosts web -m shell -a "apt update && apt install nginx -y && service nginx start"

docker stop web1 web2 
docker run --rm -dit --name web1 --hostname web1 -p 8000:80 --network ansible_nw sreeharshav/ubuntu16:withssh2.0_V2

so particular step by step by undestanding purpose we are using playbooks

---
  - name: playbook for installing nginx
    hosts: web
    gather_facts: no
    tasks:
      - name: perform apt update
        shell: apt update 

      - name: install nginx
        shell: apt install nginx -y

      - name: start nginx service
        shell: service nginx start

  - name:  installing unzip
    hosts: web
    gather_facts: no
    tasks:
      - name: perform apt update
        shell: apt update 

      - name: install unzip
        shell: apt install unzip -y

create a file vi myplay.yml
paste the above content

ansible-playbook -i hosts myplay.yml --syntax-check
ansible-playbook -i hosts myplay.yml -vvv
ansible-playbook -i hosts myplay.yml 


ctrl +c 
docker exec -it web1 unzip
check the info of unzip it will unzipping or not

---
  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: no
    tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            owner=root
            group=root
            mode=0644
       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            owner=root
            group=root
            mode=0644
       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            owner=root
            group=root
            mode=0644
       - name: restart nginx
         command: service nginx restart


docker exec -it controller bash
ls /tmp/
cd /tmp
git clone https://github.com/mavrick202/dockertest1.git


now go to browser type public ip with port no of 8000
publicip:8000/

--------------------------------NGINX Install Using Client Local Nginx Folder--------------------------

  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: no
    tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       
       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
       
       - name: restart nginx
         command: service nginx restart
       
       - name: Delete Git Repo
         shell: rm -rf /tmp/dockertest1
         


---- handlers (if any changes made then only we need to restart the server means we need to use handlers)

---
  - name: Play for Install Nginx on WebServers
    hosts: web
    ignore_errors: true
    gather_facts: no
    tags:
      nginx
    tasks:
       - name: Run Apt Update
         shell: apt update
         tags:
           - update

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git
         tags:
           - git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
         tags:
             install

       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - index
         notify:
            - restart nginx

       - name: Copy the style files to  destination folder.
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - style
         notify:
            - restart nginx

       - name: Copy the javascript files to  destination folder.
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - index
         notify:
            - restart nginx

       - name: Delete Git Repo from tmp
         shell: rm -rf /tmp/dockertest1
         tags:
           - delete
    handlers:
       - name: restart nginx
         command: service nginx restart
         
         
  -------------------------------------------------PLAYBOOK-WITH-TAGS-HANDLER-VARIABLES_REGISTER---------
- name: Play for Install Nginx on WebServers
  hosts: web
  gather_facts: no
  tasks:
       - name: Run Apt Update
         shell: apt update

       - name: Check OS Version
         shell: cat /etc/lsb-release
         register: os_version
         tags:
           - os

       - debug:
           var: os_version['stdout_lines'][1]
         tags:
           - os

       - name: Clone Git Repo
         shell: cd /tmp && git clone https://github.com/mavrick202/dockertest1.git

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present

       - name: Copy the files to index destination folder.
         copy: >
            src=/tmp/dockertest1/index.html
            dest=/var/www/html/index.nginx-debian.html
            remote_src=yes
            owner=root
            group=root
            mode=0644
         notify:
          - restart nginx
         tags:
           - index
       - name: Copy the style files to  destination folder.
         notify:
          - restart nginx
         copy: >
            src=/tmp/dockertest1/style.css
            dest=/var/www/html/style.css
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - style

       - name: Copy the javascript files to  destination folder.
         notify:
          - restart nginx
         copy: >
            src=/tmp/dockertest1/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            remote_src=yes
            owner=root
            group=root
            mode=0644
         tags:
           - js

       - name: Delete Git Repo
         shell: rm -rf /tmp/dockertest1

  handlers:
    - name: restart nginx
      command: service nginx restart       



debug is used for the to show message outside.


*** tags running 
ansible-playbook -i hosts myplay.yml --check --tags os,index

                                                                        conditions && loops:
ref url:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html
https://docs.ansible.com/ansible/2.4/playbooks_loops.html
---
- name: Create set of users
  hosts: all
  gather_facts: yes
  vars:
    os1family: "Debian"
    os2family: "RedHat"
    password: "$1$oEe4m6pU$AAiaKEiYrrcOHW3v3oj7d."
  tasks:
    - name: Create Testusers 1,2,3,4,5
      user: >
        name={{ item }}
        shell=/bin/bash
        password={{ password }}
      with_items:
        - debuser1
        - debuser2
        - debuser3
        - debuser4
        - debuser5
      when: ansible_os_family == "{{ os1family }}"
    - debug:
        msg: The OS Family is {{ ansible_os_family }}
      tags:
        - ubuntu
        - test
    - name: Create Testusers 6,7,8,9,10
      user: >
        name={{ item }}
        shell=/bin/bash
        password={{ password }}
      with_items:
        - rheluser1
        - rheluser2
        - rheluser3
        - rheluser4
        - rheluser5
      when: ansible_os_family == "{{ os2family }}"
    - debug:
        msg: The OS Family is {{ ansible_os_family }}
      tags:
        - rhel
        - prod
        
        
******* to get all the information about that particular server.

ansible -i hosts web1 -m setup

vi /etc/ansible/ansible.cfg
To configure fact caching using redis, enable it in ansible.cfg as follows:
[defaults]
gathering = smart
fact_caching = redis or jsonfile
fact_caching_timeout = 86400 # seconds

after that above code u paste it.
ansible -i hosts web1 -m setup

Example:
[defaults]
gathering = smart
fact_caching = jsonfile
fact_caching_connection = /tmp/factsjson
fact_caching_timeout = 86400


root@controller:/# ll /tmp/factsjson/
total 92
drwxr-xr-x 2 root root  4096 Mar 23 02:13 ./
drwxrwxrwt 1 root root  4096 Mar 23 02:14 ../
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web1
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web2
-rw-r--r-- 1 root root 27335 Mar 23 02:13 web3

now all cathing will be there on under /tmp/factsjson/

cat /tmp/factsjson/web1 | grep -i ansible_os


conditions:
https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html


madhu webserver info *** container ip's


https://github.com/mavrick202/ansibletemplatetesting


---
  - name: Play for Install Nginx on WebServers
    hosts: web
    gather_facts: yes
    vars:
      custom_heading: "Welcome To DevOps Training B13 By Sreeharsha Veerapalli"
      todays_date: "{{ ansible_facts['date_time']['date'] }}"
      host_name: "{{ ansible_facts['hostname'] }}"
      fqdn_name: "{{ ansible_facts['fqdn'] }}"
      ip_address: "{{ ansible_facts['eth0']['ipv4']['address'] }}"
    tasks:
       - name: Run Apt Update
         shell: apt update && apt install -y python-apt

       - name: Install Nginx Server
         apt: >
           name=nginx
           state=present
       - name: Copy the files to index destination folder.
         template: >
            src=/tmp/ansibletemplatetesting/index.j2
            dest=/var/www/html/index.nginx-debian.html
            owner=root
            group=root
            mode=0644
       - name: Copy the style files to destination folder.
         copy: >
            src=/tmp/ansibletemplatetesting/style.css
            dest=/var/www/html/style.css
            owner=root
            group=root
            mode=0644
       - name: Copy the javascript files to destination folder.
         copy: >
            src=/tmp/ansibletemplatetesting/scorekeeper.js
            dest=/var/www/html/scorekeeper.js
            owner=root
            group=root
            mode=0644
       - name: restart nginx
         command: service nginx restart





docker run --rm -dit -p 8000:80 sreeharshav/rollingupdate:v5

note : u should had to run this command below the controller.









   
   






















