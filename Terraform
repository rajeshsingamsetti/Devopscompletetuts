Welcome to terraform

it is one of the famous Infrastracture tool

for aws --> cloudformation
for azure --> Azure resource manager

above clouds are not that mush comfortable

The third party tools is
Hashicorp terraform

* Infrastarture deployment made easy
* supports all cloud providers


====for infrastrcture management tools is terraform

configuration management tool is

chef
puppet
ansible

Diff b/w infra and configuration mangement
once infrastracture deployment is done we can use configure management for more effictive work

Terraform Advantages && Disadvantages:
advantages:
when compare to json teeraform code is simple
can be used with multiple cloud vendors
it's not that mush platform dependent the code will change depends upon platform
config can be split into multiple files
we can run perform dry-run easily for debugging purpose
importing of manual resources

Dis Advantages:
It's third party tool.new services might not be available
bugs in latest version (11.) is stable version
lack of support (paid for support)

** cloudformation and terraform both are same one is third party another is aws

How to use terraform on aws

let's start

install microsoft visual studio code in mac or windows
install terraform plugin on visual studio code

* install terraform on mac
download zip file from terraform official site

after follow the below official document
https://learn.hashicorp.com/tutorials/terraform/install-cli

to check terraform installed or not in your system u simply enter the below command

terraform version

================now we need to configure aws=====================
login into aws account 
Go to iam
add user
username ==> give programatic access ==> next ==> click on attach existing policy + check on administartion access ==> next ==> click on create user ==> 

install configure aws cli
to configure
aws configure
==================
RAJs-MBP:bin rajsingam$ aws configure
AWS Access Key ID [None]: AKsdsdIAQ5WQEB7SJIDCHSVQ
AWS Secret Access Key [None]: rbZsdsdffdfyFSFVfgWxgfgEBCfznufpJNEdMefGooRCo8AG1yyU
Default region name [None]: ap-south-1
Default output format [None]: 
RAJs-MBP:bin rajsingam$ aws s3 ls
2020-05-27 16:03:38 dev.k8s.demo.rajnew
====================
****** tutor githubcode for reference
https://github.com/addamstj/Terraform-012
================
** terraform most useful commands
Common commands:
    apply              Builds or changes infrastructure
    console            Interactive console for Terraform interpolations
    destroy            Destroy Terraform-managed infrastructure
    env                Workspace management
    fmt                Rewrites config files to canonical format
    get                Download and install modules for the configuration
    graph              Create a visual graph of Terraform resources
    import             Import existing infrastructure into Terraform
    init               Initialize a Terraform working directory
    output             Read an output from a state file
    plan               Generate and show an execution plan
    providers          Prints a tree of the providers used in the configuration
    refresh            Update local state file against real resources
    show               Inspect Terraform state or plan
    taint              Manually mark a resource for recreation
    untaint            Manually unmark a resource as tainted
    validate           Validates the Terraform files
    version            Prints the Terraform version
    workspace          Workspace management

All other commands:
    0.12upgrade        Rewrites pre-0.12 module source code for v0.12
    debug              Debug output management (experimental)
    force-unlock       Manually unlock the terraform state
    push               Obsolete command for Terraform Enterprise legacy (v1)
    state              Advanced state management
===================
terrraform our first code
vscode open a folder
create a file as the main.tf

provider "aws" {
    region = "ap-south-1"
}

resource "aws_vpc" "mypc" {
  cidr_block = "10.0.0.0/16"
}

open terminal in vscode & type
terraform init
terraform plan
terraform apply + yes

Now u can see that your vpc is created in aws (but we did n't give our aws credentails means prviously we did aws configure
after apply we will see like this
=======
Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.mypc: Creating...
aws_vpc.mypc: Creation complete after 5s [id=vpc-04b9719fa4475b4bd]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
===========
now copy ur vpc id go to ur aws and check your vpc is created or not

=========destroy====
terraform destroy + yes

================== vpc setup ==================








