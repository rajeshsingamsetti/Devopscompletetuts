
in real time

we had 3 stages to create a infrastrcture

1 -->
git repo + packer.json + *.tf files 

2 -->
run packer for custom ami
3 -->
deploy infra using terraform


above stages we don't do in manually for automation purpose we need one tool that tool is jenkins or azue devops


before we going jenkins we need to know packer
ref url:https://www.packer.io/

download packer
sample code realtime packer :
ref url: https://github.com/rajeshsingamsetti/Devopscompletetuts/blob/main/sir-terraform-packer-jenkins/packer.json

***** why we need packers meanes
to create only an image or ami (it's diff between packer and terraform will create overall infrastrcture)
image creation means

first ec2 machine will crete after update after stop after it will create one ami (but using this ami packer won't create another ami it will done by terraform)

terraform will use the machine image of created by packer
lets start with packer install on mac or linux
locate into 
cd /usr/local/bin
wget https://releases.hashicorp.com/packer/1.6.5/packer_1.6.5_darwin_amd64.zip


sample packer.json file will be like this
{
    "_comment" : "Create a AWS AMI ith AMZ Linux 2018 with Java and Tomcat",
    "variables": {
      "aws_access_key": "",
      "aws_secret_key": "",
      "region": "us-east-1",
    "source_ami":"ami-04d29b6f966df1537",
    "instance_type":"t2.micro",
    "vpc_id": "vpc-0d143ca90e92391ad",
    "subnet_id": "subnet-07cd6a2096d287466"
    },
    "_comment1" : "packer build -var \"aws_secret_key=foo\" template.json",
    "_comment2" : "packer build -var-file creds.json template.json",
    "builders": [{
      "access_key": "{{user `aws_access_key`}}",
      "secret_key": "{{user `aws_secret_key`}}",
       "type": "amazon-ebs",
    "region": "{{user `region`}}",
    "source_ami": "ami-04d29b6f966df1537",
    "instance_type": "t2.micro",
    "ssh_username": "ec2-user",
    "ami_name": "DevOpsClass-Build-{{isotime | clean_resource_name}}",
    "vpc_id": "vpc-0d143ca90e92391ad",
    "subnet_id": "subnet-07cd6a2096d287466",
    "tags": {
      "Name": "DevOpsClass-Build-{{isotime | clean_resource_name}}"
    }
    }],
    
    "provisioners": [{
    "type": "shell",
    "inline": [
      "sleep 30",
      "sudo yum update -y",
      "sudo yum install httpd -y",
      "sudo yum install git -y",
      "sudo git clone https://github.com/mavrick202/webhooktesting.git",
      "sudo cp webhooktesting/index.html /var/www/html/index.html",
      "sudo cp webhooktesting/style.css /var/www/html/style.css",
      "sudo cp webhooktesting/scorekeeper.js /var/www/html/scorekeeper.js",
      "sudo service httpd start"
      ]
  }]
}

here we need to change the ami number and region & instance type will t2.micro

after adding the access and secreat key we need to follow below procedure

give source ami,instance type:
"source_ami": "ami-04d29b6f966df1537",
"instance_type": "t2.micro",

packer validate packer.json (to validate packer.json)
if u had any errors it will show if u don't have it will show nothing

to build  packer

packer build -var=aws_access_key=AKIAQ5WQEB7SMCSE2CI6 -var=aws_secret_key=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 packer.json

we will see ec2 will create according to packer.json requirememt after it will create ami image and after instance will delete automatically

packer build packer.json
** after build successfull ami now we are going to install jenkins
take one ubuntu 18.04 server launch the instance

Now we are going 

for jenkins we need to install java

sudo su
cd
apt-get update -y
apt search openjdk

we will see the below information
openjdk-8-jdk/bionic-updates,bionic-security 8u275-b01-0ubuntu1~18.04 amd64
  OpenJDK Development Kit (JDK)

apt install openjdk-8-jdk -y

jenkins install on ubuntu 
ref url : https://www.jenkins.io/doc/book/installing/linux/#debianubuntu

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

+ enter Y

service jenkins start

ipadrres:8080 / open in browser

cat /var/lib/jenkins/secrets/initialAdminPassword

apt install unzip -y

cd /usr/local/bin/
wget https://releases.hashicorp.com/terraform/0.14.0/terraform_0.14.0_linux_amd64.zip
unzip terraform_0.14.0_linux_amd64.zip 
rm -rf terraform_0.14.0_linux_amd64.zip 

terraform -version
Terraform v0.14.0

now we are going to install packer
ref download url:

cd /usr/local/bin/
wget https://releases.hashicorp.com/packer/1.6.0/packer_1.6.0_linux_amd64.zip
unzip packer_1.6.0_linux_amd64.zip

rm -rf packer_1.6.5_linux_amd64.zip 
packer -version
1.6.0


su -jenkins
check
terraform 
packer
after 
create one folder
mkdir .aws
cd .aws
vi credentials
[default]
aws_access_key_id=AKIAQ5WQEB7SDKPBWCLB
aws_secret_access_key=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

refurl:
https://www.packer.io/docs/builders/amazon
commands are working or not in jenkins user


Now weburl jenkins dashbaord

go to manage jenkins

manage plugins --> available plugins --> search for packer + install without restart

dashboard
new item + itemname + freestyle project + ok

source code git and url is
https://github.com/rajeshsingamsetti/terraformsingleinstance.git
its public repo so we don't need any credentails 

Under Build
execute shell


execute 
#!/bin/bash
packer version
packer validate packer.json

if [ $? -eq 0 ]

then
echo "success add image"
#packer build packer.json 2>&1 |  tee output.txt
#tail -2 output.txt | head -2 | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }' >  ami.txt
AMIID=$(<ami.txt)
echo "variable imagename { default = \"$AMIID\" }" >> variables.tf
terraform init
terraform apply --auto-approve
else 
echo "validation fail check the code"
exit 1
fi



save it
uncomment the main.tf file
resource "aws_instance" "web-1" {
}

build it (we will get successs message)
*note on linux server export the 
aws_access_key and secreat key don't forget

you will get success message

====================== jenkins pipeline for more userfriendly in packer and terraform===========

dashbaord + new item + pipeline create it
under pipeline choose pipeline script the sample code is like that

node {
    stage('Preparation') { // for display purposes

    }
    stage('Build') {
        
    }
    stage('Results') {
       
    }
}

apply build u will see design of blocks

note : u must install stage view plugins from manage plugin



sample pipeline code 
Scripted Pipeline(NOT ADDED TO REPO):
=====================================
BELOW PIPELINE CLONES REPO, CREATE PACKER IMAGE &  DEPLOY TERRAFORM
-------------------------------------------------------------------
 
node {
   stage('Clone Git Repo') {
       sh "rm -rf terraformsingleinstance"
       sh "git clone https://github.com/mavrick202/terraformsingleinstance.git"
       sh "ls -al"
   }
   stage('Perform Backer Build') {
       dir("terraformsingleinstance") {
       sh "pwd"
       sh "packer build packer.json 2>&1 | tee output.txt"
       sh "tail -2 output.txt | head -2 | awk 'match(\$0, /ami-.*/) { print substr(\$0, RSTART, RLENGTH) }' > ami.txt"
       sh "echo \$(cat ami.txt) > ami.txt";
       def AMIID=readFile('ami.txt').trim()
       sh "echo variable \\\"imagename\\\" { default = \\\"$AMIID\\\" } >> variables.tf"
               
       }
       
   }
   stage('Terraform Apply') {
       dir("terraformsingleinstance") {
       
           sh "terraform init"
           sh "terraform apply --auto-approve"
       }
       
   }
}
 
===========================================================================================
BUILD EXECUTE SHELL SCRIPT:
=======================================
#!/bin/bash
packer version
packer validate packer.json
if [ $? -eq 0 ]
then
echo "Validation Sucessfull.Lets Build The Image."
packer build packer.json 2>&1 | tee output.txt
tail -2 output.txt | head -2 | awk 'match($0, /ami-.*/) { print substr($0, RSTART, RLENGTH) }' > ami.txt
AMIID=$(cat ami.txt)
echo "variable imagename { default = \"$AMIID\" }" >> variables.tf
terraform init
terraform apply --auto-approve
else
echo "Validation FAILED. Check the CODE"
exit 1
fi
=========================================








