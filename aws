aws => devops => azure => k8's => python

why aws
roadmap for aws carrer
aws account creation
iaas vs paas vs saas
check jobs available on aws

why aws 
good in iaas ,more jobs, rapid developement,Heavy automation tools

AWS Regions & Avaialability zones

ref url:
https://aws.amazon.com/about-aws/global-infrastructure/?p=ngi&loc=0
https://aws.amazon.com/about-aws/global-infrastructure/regions_az/

more graphical about az and regions
ref url:
https://infrastructure.aws/

az means region inside a place with in 100km a dataceneters will exist

3 tier or multi tier archetecture menans
we have one service like flipkart if we deploy that service in only 1 az that az gone means evertything is gone in aws we don't fallbackloops.

to overcome load or availability we need to deploy our webapp on multi az then 1 az gone means another az will available

virualization:
ec2 every machine is virutualization

physical server
hypervisor
webapps
db

dedicated physical servers high cost rarely using

======================================
IP Adressing
2 types
ipv4 32 bit size -- 
172.217.13.228
1.0.0.0 to 255.255.255.255
ipv6 64 bit --- 
now no one are using ipv6

mostly using ipv4
ip address class
refurl:
https://www.paessler.com/it-explained/ip-address

Class	Address range
Class A	1.0.0.1 to 126.255.255.254
private range:
10.0.0.0 – 10.255.255.255
all office private ip will be in 10 ranges (if we need more ip's we choose class a willgive 16 million hosts)
Class B	128.1.0.1 to 191.255.255.254
private range:
172.16.0.0 – 172.31.255.255
(class b having 65,000 ) ip address
Class C	192.0.1.1 to 223.255.254.254
private range:
192.168.0.0 – 192.168.255.255
class c having (254 ip addresss)
Class D	224.0.0.0 to 239.255.255.255

world every ip exist in above classes

 class a network is enterprice network
diff bw pubic & private ip
ex: 10 th hall ticket in ur own school rollno

*** we most lo enterprise we work on classa

private ip is internal network communication purpose(inside over network communication).
publicip is communicate over internet (all world public ip should be unique)
nat gateway is a router provide internet access to all machines
==========subneting===================
refurl: http://www.subnet-calculator.com/subnet.php?net_class=A
000 - 1
001 - 2
010 - 4
011 - 8
100 -16
101- 32
110 - 64
111 - 128

if we add all bits we will get 255 bit
(subneting)
ref url of subnet calculator: http://www.subnet-calculator.com/subnet.php?net_class=A
10.1.0.0/16 > 65k
10.1.1.0/24 > 255 
10.1.2.0/24 > 255 

if i need only 32 ips we will go with above calculator
and network class is check A --> ip address:10.1.1.0 and under host per subnet choose nearest value 32 is 64 thats why i am choosing 64 + subnet mask 255.255.255.0
again 2 nd subnet --> 10.1.1.64 --> subnet range 64  + + subnet mask 255.255.255.0

(don't more think about subnet just know 10.1.1.0/24 && 10.1.2.0/24

10.1.1.0/24 --> 254 ip's
   /25 (half of 23) --> 122
   /26 --> 60
   /27 --> 30 ip's
 -----------public cloud &&& private cloud difference----------
 public cloud everyone can acess --> aws,azure,
 (we work public servers in public network we are create own network layer is called as vpc)
 private cloud only with in a network we don't use it).
 
vpc use
custom own network layer or interface
more security

==================================================================vpc==============================================================================
BY DEFAULT WE can create 5 vpc only of we need more we need to send request to aws team

when we create vpc it will create its own layers and all the instances are present in network and all instances will communicate in same network layer .but different
network layeres we won't able to join .
note when we create subnet we don't had an chance to change
By default aws we will have an vpc
vpc archetecture 
ref url: https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2018/03/22/VPC-Architecture-1.jpg
lets create a vpc
=================steps to create a vpc=============== (multiple vpc had same private id we don't have no problem bcoz vpc's isolated that too its going diff igw)

** main source: https://docs.google.com/document/d/1nt6h_cDQqESPaInvpvpKdtUqgd0e2N-ra61qZedVfbE/edit
**: 1 own 111 slide: https://docs.google.com/presentation/d/1jOk9XdxR35zI4sYA2vacSSwz8KGtvpFbs_Fk3Jti5yE/edit#slide=id.p
** 2 documentation: https://drive.google.com/file/d/1X73iKh-c-TXUvMd6TIfsGKKK9Z9fZ5TX/view?ths=true

1. Decide on VPC name and create a new VPC. For this class VPC name is AWS-JAN-21-VPC and IP Address space we are going to use is 10.1.0.0/16 =>65000 IPs. 
Enable DNS Hostnames.

2. Create three subnets in AWS-JAN-21.Enable automatic IP Assignment.(it will auto assign public ip's to ur subnet instances).
(subnet ranze should be unique)
JAN-21-Subnet1 - 10.1.1.0/24 -1a
JAN-21-Subnet2 - 10.1.2.0/24 -1b
JAN-21-Subnet3 - 10.1.3.0/24 -1c

3. Create internet gateway and attach it to VPC. IGW name is AWS-JAN-21-IGW.
*when vpc created default one route table will created
4. Create new routing table for AWS-JAN-21 and assosiate subnets to it. Ignore the default routing table.
edit routes --> add route 0.0.0.0 + internetgateway(choose select it). + save route
=subnet assosation --> add your subnets 
5. Add routes in the routing table towards Internet Gateway.

6. Create a security group Infy-VPC-SG and allow all in bound ports.

7. Create a Key-Pair which create Public and Private Keys. AWS will have Public Key and you will be given private key. We need to use the private key to login to the instance.

8. Deploy a Linux t2.micro instance and connect to it using private key u have created.

=======================================================================================================

detail explanation
Virtual private cloud . 10.2.1.0/24
1. Decide what IP Range we need to use : 10.0.0.0/16 (255.255.0.0)
2. Create a VPC and name it as rajvpc. ENable DNS Hostnames.
3. Create 3 Subnets as below:(subnet ranze should be unique)
   raj-Subnet-1 - 10.1.1.0/24 - us-east-1a
   raj-Subnet-2 - 10.1.2.0/24 - us-east-1b
   Ford-Subnet-3 - 10.1.3.0/24 - us-east-1c
Once Subnets are created, enable automatic public ip assignment.
4. Create internet gateway using Name Ford-IGW and attach to VPC.
5. Create a new routing table as Ford-Main-Table and attach Subnets to it.
6. Create a route towards IGW.
7. Create a Security Group and allow all ports.
8. Create a Key Pair.
9. Deploy a new VM/Instance/Server and connect using the key u created in step 8.


Step2:as follows click on create.
*** choose ur vpc actions → edit dns hostname → enable→ save that vpx
NoteWhen we are creating a vpc then default some route and network acls and security groups are created.
.
Step 3. Create 3 Subnets as below:
   raj-Subnet-1 - 10.0.1.0/24 - us-east-1a
   raj-Subnet-2 - 10.0.2.0/24 - us-east-1b
   raj-Subnet-3 - 10.0.3.0/24 - us-east-1c
Once Subnets are created, enable automatic public ip assignment.
Here we need to add 3 subnets with different availabilty zones and different cidr.



Now our vpc is present on 3 availability zones of n.verginia region.
Note: when u created subnetes ut will take as az to that region.
*** after all subenets created → check ur each and every subnet → modify auto assign ipaddress→ check on enable auto assign ipaddress.
4. Create internet gateway using Name raj-IGW and attach to VPC
Note : if u want get access your vpc we need Internet Gateway(IGW)
Go to internetgateway → create → give ur igw name.

After creating ur gateway check on ur gateway and actions choose ur attach vpc → search ur vpc name → attach it.

Note: we only attach one internet gateway to one vpc .(we can’t attach multiple igw to 1 VPC).

 5. Create a new routing table as Ford-Main-Table and attach Subnets to it.
By using routes we can guide them how it will go outside.

Click on route tables → create a route table → name rajroute → choose rajvpc → click on create.
5. Create a new routing table as Ford-Main-Table and attach Subnets to it.


After creating ur route table → check ur route name → below tab click on subnet association → here u will see all the subnets. → edit → check 3 subnets → click on save.

Above setup we did for internal communication thats why we add routes to subnet.
6. Create a route towards IGW.
If we want access from outside we need tell that routes when we access from outside follow this procedure for that → 
Check ur routes below click on routes tab → click on edit routes → add rule → in destination (0.0.0.0/0) + target (internet gateway click on it + choose ur gateway) → click on save.


7. Create a Security Group name rajvpc and allow all ports.
Now it wiil allow all traffic from outside for securing purpose we are going to add the security groups .
Create a security group → give name of security group → and under vpc + choose our vpc → inbound rules (for demo purpose all traffic in real time don’t use all traffic) →
Create security group.


8. Create a Key Pair. (create a ur own key )
As of now i am using my default key.
For that go to ec2 → create your own key.

DEploy a linux micro instance ..


Under configure details follow above procedure.--> security groups choose ur rajvpc security groups → key pair don’t have create it or exist use it → launch instance.

After go to the terminal using mobxtream or putty.using public ip address.

If its logged in means successfully we configure vpc.
===========================================================================

                                                                    VPC PEERING
To connecting 2 vpc’s called as the vpc peering.

Previously vpc peering available in same region but now vpc peering available on across all regions

2 types:
Inside region
Outside region

Uses :
Single company.
Testing development and production
Multi companies:
We can peering b/w employees can access other company servers and vice versa
For security purpose:

If u want access any vpc like testing or dev first u need to managed or secured by management vpc.
Hands on create 3 vpcs on 2 vpc or in one region and 1 vpc in different region.
Ex:n.vieginia 2 vpcs and mumbai 1 vpc.





After go to ec2 and launch the instances.
Ec2 → micro → configure → choose rajvpc1 → choose ur subnet → practise purpose (security group allow all) → launch instance..
Same above process launch other instance in rajvpcsameregion

Login 2 servers of same region in terminal.
Login in to 2 servers ping from one server to another server of private ip not pulicip.
Note: when private ip’s are pinging then vpc peering done successfully.not public

Initially it wont ping after we did vpc peer it will ping.

For vpc peering.
Note: vpc peering 2 servers don’t have same ip if exists it will through an error
Go to aws -> vpc connection → create a peering connection → tagname (rajpeering to rajvpc1) →  select under local vpc under → choose the vpc of rajvpc → select another vpc accepter → choose our another (sameregionvpc) → create a vpc peering.

Afte it will show pending for that → actions → accept request → ok.--> now the status will be active .

 .




After that go to rajvpc instance terminal ping another server private ip it won’t work.
Because we need to update the route table. Of 2 vpc routes
Now first  go to rajvpc routes → below routes tab → click on edit → under destination u 

have to give the another server vpc range (means sameregion vpc range is 10.0.1.0/16) → target choose peer connection (chooose raj peer connection ) → click on ok.

Now go to route of rajsameregion check this and below roues add destination ip is (the ip range of rajvpc 10.0.0.0/16) → target + peerconnection choose raj peer connection → click on ok.

After all settings done gop to rajvpc ec2 terminal nad ping the private ip address of rajsameregion (second server ) now it will ping the private ip address.

Note: if u want check this doing exactly peering or not just go to vpc routes → edit ---> under destination (change the ip range from default value to anything it will stop the pinging again u revert back it will start to pinging once).

As of Now above we did only in same region if that vpc there in out of region it will be chargeable follow below procedure.

NOte: of u want perform multi region peering the keypair of ec2 instance login it must be same.
For that go to mumbai region → under ec2 → keypair → actons → import → place the ppk file of other instance or → under public key contents + copy the instance public key below procedure as follows. → click on import.

If u want get a public key login into server → ec2-metadata (under last we will get ssh-rsa public key copy that and .

Launch the instances.
Launch instance in mumbai region → choose key what we configure key.

Creata peering connection → name northverginia instance to mumbai → choose nvregionvpc (as a requester) → under select another vpc peer with + region tab choose another region choose mumbai region → under vpc acceptance (input field copy the vpc id of mumbai region vpc) go to mumbai vpc check below summary u will find vpcid →paste in acepter vpc → create peering connection .

****** if u want activate the peering connection go to your destination peerconnection region  → under peer connection action u will find the activate peer connection.(this connection for actions not showing enable peerconnection on source vpc).


Now login into two terminals try to ping it won’t ping now we need to configure the 2 routing tables.

Routing tables -> edit routes → destination + give mumbai ip range ) → target -->choose vpc peerconnection choose ur peer connection).

Routing tables -> edit routes → destination + give mumbai ip range ) → target -->choose vpc peerconnection choose ur peer connection)

Now u can go to another server routes follow above the same procedure now it will pingf.

Now not ping now i want access the nv server from my mumbai server for that we need to configure pemfile.

Login into mumbai server as a root → sudu su -
After create a file with same name → vi sp-key.pem (paste the key pair pem file total code in this file).
Note: keypair should be common between both servers,
After pasting the pem file now from ur root of mumbai server uf u access means it will through an error.
Bcoz we need provide read permission to pemfile for that
chmod 400 sp-key.pem

Now from root try like this below way.
root@ip-10.64.63]#   ssh -i sp-key.pem ec2-user@privateipofserver + enter 

Now u can successfully login into that server from mumbai.
Note : if u want access tha another server peering must be enable.

*** when vpc concept → ip’s are must be different otherwise ip’s are overlap.
Vpc transit won’t work.
******** ec2-metadata copy key and paste in all key files .
note : another region and another account same key file will be needed.

============================ aws vpc nat gateway===================================================
what is nat gateway:
NAT Gateway, also known as Network Address Translation Gateway, is used to enable instances present in a private subnet to help connect to the internet or AWS services. In addition to this, the gateway makes sure that the internet doesn’t initiate a connection with the instances.
NAT Gateway service is a fully managed service by Amazon, that doesn’t require any efforts from the administrator.

They don’t support IPV4 traffic. In the case of IPV4 traffic, an egress-only internet gateway needs to be used (which is another service).

A NAT gateway in a device forwards the traffic from instances present in the private subnet to the internet/AWS services, and sends back the response from the server back to the instance. When the traffic moves to the internet, 
an IPV4 address gets replaced with the NAT’s device address.
Once the response is obtained, it has to be sent to the instance, and in this case, the NAT device translates the address back to the IPV4 and it is given to the IPV4 address.

There are two kinds of NAT devices which AWS offers- A NAT gateway and a NAT instance. AWS recommends the usage of NAT gateways since it helps provide high availability and a better bandwidth in comparison to NAT instance.


ref url: https://www.knowledgehut.com/tutorials/aws/aws-nat-gateway

when vpc is created default route table is created (if u are not created ur route it will use default route)

****note: which subnet is not directlly connected to igw is called private subnet


to implement nat we need one vpc create with ip range 192.168.0.0/16
Note : after created subnets must add public ip allication
after create 2 public subnets diff region with range on 192.168.1.0/24 && 192.168.2.0/24 
after create 2 private subnets diff region (is same region diff iprange)with range on 192.168.10.0/24 && 192.168.20.0/24

note : default one route table is created it assigns all your subnets
crete one internet gateway attach to ur vpc

go to default created mainroute and edit routes add internet gateway 0.0.0.0 choose igw

but here if u observe all subnets means private subnets also connected to igw

now create one route table
choose your vpc crate after come to subnet assosiation
choose your private subnets and add it

now ur private subnets or real private subnets

create one security group with allow all trafic

now launch 2 ec2 instances one for public another for private

launch instance choose public subnet and create it launch it

now launch another instnce with private subnet (wnatendly choose public ip enable)

if you ping public ip it will ping but if u come to private it won't be ping(private server private ip check with it) 


Now for private subnets we create one nat gateway

create a nategateway
choose one public subnet and choose public instance allocate elastic ip: create it

now you can login into ur above attached public instance and ping ur private instance privateip it will ping

create one file in public instance
nano somekey.pem
copy paste ur pem file(which u choose for private instance)
chmod 400 somekey.pem

now we r try to login private subnet

ssh -i somekey.pem ec2-user@ipaddressprivate
after loginto private serverr
if u ping www.google.com
it won't ping bcoz it don't have internet access

** now go to nat private routes edit routes + add route
0.0.0.0 and choose target nat gateway is ur natgateway name

now u ping private instance ping www.google.com


*** note if u want to private server use internet we must use nat gateway


=================== elastic ip==========================================================

if you stop and  start ur instance ur ip will change if u want overcome that u need to use elastic ip(contant allocated ip won't change)

create elastic ip
assosiate elatic ip to ur running instances and click on assosite

now u reboot ur system and start the instance it will constant ur ip adress it won't change ur ip

elastic means we will change elastic ip from one server another server (dis assosiate and choose another instance assosiate it)
we will use in elastic ip
nat gateway
transit gateway
public web server
load balancer

============================================================End Points==============================================================
if u want your access ur service internal and do not access ur services on internet or external then we choose endpoints

launch one instance and create one user and aws configure

enter access key and secreat key

above procedure for user natgateway puprpose through internet not internal or insidw



Endpoints
2 types of endpoints

create a endpoint --> 2type of services

for only dynamodb && s3 only had gateway  remaining all are interface

Interface endpoints

An interface endpoint is an elastic network interface with a private IP address from the IP address range of your subnet. 
It serves as an entry point for traffic destined to a supported AWS service or a VPC endpoint service. Interface endpoints are powered by AWS PrivateLink.

For information about the AWS services that integrate with AWS PrivateLink, see AWS services that you can use with AWS PrivateLink. 
You can also view all of the available AWS service names. For more information, see Viewing available AWS service names.

Gateway Load Balancer endpoints

A Gateway Load Balancer endpoint is an elastic network interface with a private IP address from the IP address range of your subnet. Gateway Load Balancer endpoints are powered by AWS PrivateLink. This type of endpoint serves as an entry point to intercept traffic and route it to a service that you've configured using Gateway Load Balancers, for example, for security inspection. You specify a Gateway Load Balancer endpoint as a target for a route in a route table. Gateway Load Balancer endpoints are supported for endpoint services that are configured for Gateway Load Balancers only.

Gateway endpoints

A gateway endpoint is for supported for AWS services only. You specify a gateway endpoint as a route table target for traffic destined to the following AWS services:

Amazon S3

DynamoDB


***** practical
**** for entrypoint s3bucket and vpc shold be in same region
before assign iam role or configure aws on instances

create one entrypoint + search for s3 + check s3 + choose your vpc  + choose ur route + create entry point

launch that above selected public or private region subnet instance .

after the entrypoint creation id will affect on routes of above subnet u choose in entrypoint
launch instance 

in ur aws account s3 create or upload files

wget filename u will get that file

upload files

i=0
[root@ip-10-0-0-30 ~]# while [ $i -lt 3 ]
> do
> echo $(date) > file$i
> aws s3 cp file$i s3://bucketsufit
> i=$(( $i + 1 ))
> sleep 1
> echo "copying file file$i"
> done


interface environment

more focus on session manager:
for private subnets neeeds to practice
ref url:
https://aws.amazon.com/premiumsupport/knowledge-center/ec2-systems-manager-vpc-endpoints/

=======================================================security groups and nacl's======================================================
inbound (outside traffic comming to inside)
outside (inside machine traffic going outside)

firewal types
statefull (one side traffic allows otherside it will auto allows the traffic) ex: security groups
stateless ---> nacl

to test the server we use telnet ipaddress portno don't use ping


in security groups source we will add subnets or multiple ip's

note : network acl we don't use in real time.
nacl for subnet level purpose
nacl don't do change
when vpc created nacl are created defaultly


note :nacl inbound outbound never will be in same port

outbound rule custom + port range is 49152-65535

================== transit gateway==================================

defination:

Transit Gateway is an awesome feature announced by Amazon Web Service to simplify the network connectivity. 
In the previous scenario, you had to use VPC Peering or Transit VPC concept to form transitive nature. Using peering connection you had to implement a 
full mesh topology 
with the AWS VPC’s to make communication between each other. In VPC Peering you can’t create or connect VPN connections with an on-premises network

trasit gateway supports multi region

it will charge

create a transit gateway
name + check auto accept shared attachments create trasit gateway

launch 3 instances 3 dif vpc

ping from one instance to other instance it won't ping bcoz diff vpc


now click on transit gateway attachments + choose ur transit gateway + give name + choose vpc + check which region u allocated + create it 
choose another vpc
now click on transit gateway attachments + choose ur transit gateway + give name + choose vpc + check which region u allocated + create it 
choose another vpc
now click on transit gateway attachments + choose ur transit gateway + give name + choose vpc + check which region u allocated + create it 



wait for all state status will change the status to available

now we need configure all the routes 
go to each everyone route table
edit routes +
destination place other 2 vpc ip range + target choose transit gateway ur trasit gateway + save routes

do same operation in all other vpc's


we can do another region also vpc connection using tgw peering

================================== ec2=============================

amimachinename --(will change from region to region)
myimi --> will use in real time(bcoz its custumizable)

Here choose ami and add security group and launch the instance here we can stop and start the instance.

To connect ec2 instance through ssh follow this procedure:

ssh ec2-user@public ip address

Ur downloaded key in .pem file
Now we need change the permissions for our pem file
chmod 0400 mykey.pem
ssh -i mykey.pem  ec2-user@public ip address
Type yes and it will connect

Now u r successfully logged in into ur account.

After logged in just type 
whoami (it will display username ec2-user)

Above for mac and linux;
For windows we can use :
Puttygen software :
Download by using this u can connect to server.


Security Groups
• Can be attached to multiple instances
• Locked down to a region / VPC combination
• Does live “outside” the EC2 – if traffic is blocked the EC2 instance won’t see it
• It’s good to maintain one separate security group for SSH access
• If your application is not accessible (time out), then it’s a security group issue
• If your application gives a “connection refused“ error, then it’s an application
error or it’s not launched
• All inbound traffic is blocked by default
• All outbound traffic is authorised by default

Private vs public ip:
• Public IP:
• Public IP means the machine can be identified on the internet (WWW)
• Must be unique across the whole web (not two machines can have the same public IP).
• Can be geo-located easily
• Private IP:
• Private IP means the machine can only be identified on a private network only
• The IP must be unique across the private network
• BUT two different private networks (two companies) can have the same IPs.
• Machines connect to WWW using a NAT + internet gateway (a proxy)
• Only a specified range of IPs can be used as private IP

Elastic IPs

• When you stop and then start an EC2 instance, it can change its public
IP.
• If you need to have a fixed public IP for your instance, you need an
Elastic IP
• An Elastic IP is a public IPv4 IP you own as long as you don’t delete it
• You can attach it to one instance at a time
 With an Elastic IP address, you can mask the failure of an instance or software
by rapidly remapping the address to another instance in your account.
• You can only have 5 Elastic IP in your account (you can ask AWS to increase
that).
• Overall, try to avoid using Elastic IP:
• They often reflect poor architectural decisions
• Instead, use a random public IP and register a DNS name to it
• Or, as we’ll see later, use a Load Balancer and don’t use a public IP

Hands on → left side click on elastic ip → allocate ip address → choose Amazon's pool of IPv4 addresses → allocate → choose ec2 instance ip address → actions → associate elastic ip address  → choose instance select ur instance  → click on associate.
Note: once elastic ip created we need to associate any ip address otherwise we will get the bill.
For free tier we can use 5 elastic ip address. 

EC2 User Data(BootStrap

• It is possible to bootstrap our instances using an EC2 User data script.
• bootstrapping means launching commands when a machine starts
• That script is only run once at the instance first start
• EC2 user data is used to automate boot tasks such as:
• Installing updates
• Installing software
• Downloading common files from the internet
• Anything you can think of
• The EC2 User Data Script runs with the root user
We want to make sure that this EC2 instance has an Apache HTTP
server installed on it – to display a simple web page
• For it, we are going to write a user-data script.
• This script will be executed at the first boot of the instance. 

When we installing a server: under configure instance category we saw user data we need to just  write
#!/bin/bash
sudo su
yum update -y
yum install -y httpd.x86_64
systemctl start httpd.service  
systemctl enable httpd.service  
cd /var/www/html
echo "<html><h1>This is WebServer 01</h1></html>" > index.html

EC2 Instance Launch Types
• On Demand Instances: short workload, predictable pricing
• Reserved: (MINIMUM 1 year)
• Reserved Instances: long workloads
• Convertible Reserved Instances: long workloads with flexible instances
• Scheduled Reserved Instances: example – every Thursday between 3 and 6 pm
• Spot Instances: short workloads, for cheap, can lose instances (less reliable)
• Dedicated Instances: no other customers will share your hardware
• Dedicated Hosts: book an entire physical server, control instance placement
 
EC2 On Demand
• Pay for what you use (billing per second, after the first minute)
• Has the highest cost but no upfront payment
• No long term commitment
• Recommended for short-term and un-interrupted workloads, where
you can't predict how the application will behave.

EC2 Reserved Instances • 
Up to 75% discount compared to On-demand 
• Pay upfront for what you use with long term commitment 
• Reservation period can be 1 or 3 years 
• Reserve a specific instance type 
• Recommended for steady state usage applications (think database) 
• Convertible Reserved Instance 
	• can change the EC2 instance type 
	• Up to 54% discount 
• Scheduled Reserved Instances 
• launch within time window you reserve 
• When you require a fraction of day / week / month



EC2 Spot Instances
• Can get a discount of up to 90% compared to On-demand
• Instances that you can “lose” at any point of time if your max price is less than the
current spot price
• The MOST cost-efficient instances in AWS
• Useful for workloads that are resilient to failure
• Batch jobs
• Data analysis
• Image processing
• Not great for critical jobs or databases

• Great combo: Reserved Instances for baseline + On-Demand & Spot for peaks

EC2 Dedicated Hosts
• Physical dedicated EC2 server for your use
• Full control of EC2 Instance placement
• Visibility into the underlying sockets / physical cores of the hardware
• Allocated for your account for a 3 year period reservation
• More expensive
• Useful for software that have complicated licensing model (BYOL – Bring Your Own License)
• Or for companies that have strong regulatory or compliance needs

EC2 Dedicated Instances • Instances running on
hardware that’s dedicated to
you
• May share hardware with
other instances in same
account
• No control over instance
placement (can move
hardware after Stop / Start)

***ref url:  https://www.ec2instances.info
EC2 Instance Types – Main ones
• R: applications that needs a lot of RAM – in-memory caches
• C: applications that needs good CPU – compute / databases
• M: applications that are balanced (think “medium”) – general / web app
• I: applications that need good local I/O (instance storage) – databases
• G: applications that need a GPU – video rendering / machine learning
• T2 / T3: burstable instances (up to a capacity)
• T2 / T3 - unlimited: unlimited burst
• Real-world tip: use https://www.ec2instances.info


Ami HandsOn

Create ur instance or existing instance also will works on ami

Choose instance → click on instance →choose create image → give image name & description.--> click on create image.
Now under AMI’s → click on that ur ami → copy → choose whatever region u want → click on launch

Now our ami will launch the same configurations had previous instance.

Cross Account ami copy:
Choose ur ami → modify image permissions → choose private → here u can provide other aws account number

Placements Groups
 Under ec2 left side we can see that → placement groups → give name → cluster → create.

Create another placement group with : placement groups → give name → spread → create.
Create another placement group with : placement groups → give name → partition → 3 → create.

Create instance → in configure instance we can see that placement group option → existing → example i am taking cluster → next → crete instance

Elastic Network Interface

Eni is a virtual network interface .
In under ec2 -> network interface we can create our own interface.
We can add custom network interface to existing instance .
Same instance we have multiple networks.

Hands on:
Create network interface → give discription and select availability zone. → click on cretae.

Basically before it will be in available .click on that → right click → attach instance → choose instance → click on attach.

Note: 1 instance having and 2 network interface.

Whenever u want detach to instance and attach to other instance

Ec2 Hibernate:

• We know we can stop, terminate instances
• Stop: the data on disk (EBS) is kept intact in the next start
• Terminate: any EBS volumes (root) also set-up to be destroyed is lost
• On start, the following happens:
• First start: the OS boots & the EC2 User Data script is run
• Following starts: the OS boots up
• Then your application starts, caches get warmed up, and that can take time!

• Introducing EC2 Hibernate:
• The in-memory (RAM) state is preserved
• The instance boot is much faster!
(the OS is not stopped / restarted)
• Under the hood: the RAM state is written
to a file in the root EBS volume
• The root EBS volume must be encrypted
• Use cases:
• long-running processing
• saving the RAM state
• services that take time to initialize


Ec2 hibernate:(paid one)
Now ec2 hibernate supports on only amazon linux2 → instance type choose on M5 Large → now under configure instance we can see that → stop hibernate check hibernation on additional stop behaviour .

Stop and start instance we can see that start hibernate.
--------------------------------------------------------------------------------------------------
EC2 for Solutions Architects
• EC2 instances are billed by the second, t2.micro is free tier
• On Linux / Mac we use SSH, on Windows we use Putty
• SSH is on port 22, lock down the security group to your IP
• Timeout issues => Security groups issues
• Permission issues on the SSH key => run “chmod 0400”
• Security Groups can reference other Security Groups instead of IP
ranges (very popular exam question)
• Know the difference between Private, Public and Elastic IP
• You can customize an EC2 instance at boot time using EC2 User Data
• Know the 4 EC2 launch modes:
• On demand
• Reserved
• Spot instances
• Dedicated Hosts
• Know the basic instance types: R,C,M,I,G, T2/T3 (ram,cpu,medium ,IO, GPU )
• You can create AMIs to pre-install software on your EC2 => faster boot
• AMI can be copied across regions and accounts
• EC2 instances can be started in placement groups:
• Cluster
• Spread

======================================  ec2 ebs volume======================================================================
























































